{"version":3,"sources":["img/logo.png","serviceWorker.tsx","components/common/Footer.tsx","components/grid/Col.tsx","components/grid/Grid.tsx","components/common/Header.tsx","components/sections/Page-section.tsx","components/Home-page.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Footer","props","theme","classes","className","Col","verticalAligned","children","Grid","collapse","Header","appearance","to","src","logo","alt","icon","faTwitter","PageSection","HomePage","useState","posts","setPosts","pageSlug","useLocation","pathname","fetchUrl","postID","a","fetch","then","response","json","responseJson","length","id","includeParent","content","rendered","Promise","resolve","JSON","stringify","catch","e","console","error","fetchPageContent","map","item","key","title","dangerouslySetInnerHTML","__html","MainRouter","StrictMode","path","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,kC,wJCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0DCXOC,EAAS,SAACC,GAAwB,IACrCC,EAAmBD,EAAnBC,MAAOC,EAAYF,EAAZE,QAEf,OACE,4BAAQC,UAAS,UAAKD,EAAL,YAAgBD,IAC/B,2CACA,8D,iCCNOG,EAAmC,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,SAApB,IAA8BJ,eAA9B,MAAwC,GAAxC,SAC9C,yBAAKC,UAAS,cAASE,EAAkB,mBAAqB,GAAhD,YAAsDH,IAAYI,ICDrEC,EAAqC,SAAC,GAAD,IAAGD,EAAH,EAAGA,SAAH,IAAaJ,eAAb,MAAuB,GAAvB,EAA2BM,EAA3B,EAA2BA,SAA3B,OAChD,yBAAKL,UAAS,eAAUD,EAAV,YAAqBM,EAAW,WAAa,KAAOF,ICKvDG,EAAS,SAACT,GAAwB,IACrCQ,EAA8BR,EAA9BQ,SADoC,EACNR,EAApBU,kBAD0B,MACb,GADa,EAGtCR,EAAO,UADSM,EAAW,YAAc,GAClC,YAAuBE,GAEpC,OACE,4BAAQP,UAAWD,GACjB,kBAAC,EAAD,CAAMA,QAAQ,UAAUM,UAAQ,GAC9B,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAMG,GAAG,KACP,yBAAKC,IAAKC,IAAMC,IAAI,gCAA0BX,UAAU,WAG5D,kBAAC,EAAD,CAAKD,QAAQ,cACX,6BACE,kBAAC,IAAD,CAAMS,GAAG,cAAT,aACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,SAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,KACP,kBAAC,IAAD,CAAiBI,KAAMC,YCzBxBC,EAAmD,SAAC,GAAgD,IAAD,IAA7ChB,aAA6C,MAArC,OAAqC,EAA7BK,EAA6B,EAA7BA,SAA6B,IAAnBJ,eAAmB,MAAT,GAAS,EAC9G,OAAO,6BAASC,UAAS,uBAAkBF,EAAlB,YAA2BC,IAAYI,ICU3D,SAASY,EAAUlB,GAAO,IAAD,EACHmB,mBAAS,IADN,mBACvBC,EADuB,KAChBC,EADgB,KAGxBC,EADWC,cACSC,SACpBC,EAAYC,QAAsB,MAAZJ,EAAX,+BAAsDI,QAAtD,oCAA6FJ,GAJhF,4CAM9B,sBAAAK,EAAA,+EACWC,MAAMH,GACZI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,KAFM,uCAED,WAAOG,GAAP,eAAAL,EAAA,4DACJK,EAAgBN,QAAsB,MAAZJ,EAAmB,CAACU,GAAgBA,GAC7CC,OAAO,GAFpB,uBAGIP,EAASM,EAAa,GAAGE,GAH7B,kBAIKN,MAAM,+BAAD,OAAgCF,EAAhC,4BACXG,KADM,uCACD,WAAOC,GAAP,eAAAH,EAAA,6DAEIQ,EAAiBH,EAAa,GAAGI,SAAWJ,EAAa,GAAGI,QAAQC,SAASJ,OAAUD,EAAe,GAF1G,KAGKM,QAHL,yBAG0BH,GAH1B,kBAGmDL,EAASC,OAH5D,2GAGaQ,QAHb,6DADC,wDAJL,gCAcKD,QAAQC,QAAQP,IAdrB,2CAFC,uDAmBNH,MAAK,SAAAG,GACAA,EAAaC,OAAS,GACpBO,KAAKC,UAAUrB,KAAWoB,KAAKC,UAAUT,IAC3CX,EAASW,MAIdU,OAAM,SAAAC,GAAC,OAAIC,QAAQC,MAAM,QAASF,OA3BvC,4CAN8B,sBAqC9B,OArC8B,mCAoC9BG,GAEE,8BACE,6BACE,kBAAC,EAAD,CAAQtC,UAAU,IACfY,EAAM2B,KAAI,SAACC,EAAYC,GACtB,OACE,kBAAC,EAAD,CAAaA,IAAKA,EAAKhD,MAAOgD,EAAM,IAAM,EAAI,QAAU,OAAQ/C,QAAQ,0CACtE,wBAAIC,UAAU,iBAAd,IAAgC6C,EAAKE,MAAMb,SAA3C,KACA,yBAAKc,wBAAyB,CAAEC,OAAQJ,EAAKZ,QAAQC,gBAI7D,kBAAC,EAAD,CAAQpC,MAAM,OAAOC,QAAQ,wBC1DtB,SAASmD,IACtB,OACE,kBAAC,IAAMC,WAAP,KACA,kBAAC,IAAD,KACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,KACZC,OAAQ,kBAAM,kBAACtC,EAAD,YAQtBuC,IAASD,OACP,kBAACH,EAAD,MACAK,SAASC,eAAe,SP0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdtB,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMoB,c","file":"static/js/main.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9893d967.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL|| '', window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\ninterface FooterProps {\n  theme?: string;\n  classes?: string;\n}\n\nexport const Footer = (props: FooterProps) => {\n  const { theme, classes } = props;\n\n  return (\n    <footer className={`${classes} ${theme}`}>\n      <h1>Contactanos</h1>\n      <p>contacto@brigadadigitalmx.org</p>\n    </footer>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\ninterface ColProps {\n  verticalAligned?: boolean;\n  classes?: string;\n}\n\nexport const Col: FunctionComponent<ColProps> = ({ verticalAligned, children, classes = '' }) => (\n  <div className={`col ${verticalAligned ? 'vertical-aligned' : ''} ${classes}`}>{children}</div>\n);\n","import React, { FunctionComponent } from 'react';\n\ninterface GridProps {\n  classes?: string;\n  collapse?: boolean;\n}\n\nexport const Grid: FunctionComponent<GridProps> = ({ children, classes = '', collapse }) => (\n  <div className={`grid ${classes} ${collapse ? 'collapse' : ''}`}>{children}</div>\n);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\n\nimport logo from '../../img/logo.png';\nimport { Col, Grid } from '../grid';\n\ninterface HeaderProps {\n  collapse?: boolean;\n  appearance?: string;\n}\n\nexport const Header = (props: HeaderProps) => {\n  const { collapse, appearance = '' } = props;\n  const collapseClass = collapse ? 'collapsed' : '';\n  const classes = `${collapseClass} ${appearance}`;\n\n  return (\n    <header className={classes}>\n      <Grid classes=\"content\" collapse>\n        <Col>\n          <Link to=\"/\">\n            <img src={logo} alt=\"Brígada Dígital MX Logo\" className=\"logo\" />\n          </Link>\n        </Col>\n        <Col classes=\"two-spaces\">\n          <nav>\n            <Link to=\"/proyectos\">Proyectos</Link>\n            <Link to=\"/nosotros\">Nosotros</Link>\n            <Link to=\"/faqs\">FAQs</Link>\n            <Link to=\"/\">\n              <FontAwesomeIcon icon={faTwitter} />\n            </Link>\n          </nav>\n        </Col>\n      </Grid>\n    </header>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\ninterface PageSectionProps {\n  theme?: string;\n  classes?: string;\n}\n\nexport const PageSection: FunctionComponent<PageSectionProps> = ({ theme = 'dark', children, classes = '' }) => {\n  return <section className={`page-section ${theme} ${classes}`}>{children}</section>;\n};\n","import React,\n{\n  // useEffect,\n  useState,\n} from 'react';\n\nimport {\n  Header,\n  Footer,\n} from './common';\nimport { PageSection } from './sections';\n\nimport {\n  // useParams,\n  useLocation,\n} from 'react-router-dom';\n\n\nexport function HomePage (props){\n  const [posts, setPosts] =  useState([]);\n  const location = useLocation();\n  const pageSlug = location.pathname;\n  const fetchUrl = (postID && pageSlug ==='/') ? `/wp-json/wp/v2/pages/${postID}` :`/wp-json/wp/v2/pages?slug=${pageSlug}`;\n\n  async function fetchPageContent(){\n      return fetch(fetchUrl)\n      .then(response => response.json())\n      .then(async (responseJson) => {\n        responseJson = (postID && pageSlug ==='/') ? [responseJson] : responseJson;\n        if (responseJson.length>0){\n          const postID = responseJson[0].id;\n          return fetch(`/wp-json/wp/v2/pages?parent=${postID}&orderBy=date&order=asc`)\n          .then(async (response) => {\n            // if (responseJson.length > 0){\n              const includeParent = (responseJson[0].content && responseJson[0].content.rendered.length) ? responseJson : [];\n              return Promise.resolve( [...includeParent, ...(await response.json())])\n            // }else{\n            //   return Promise.resolve( [...includeParent, ...(await response.json())])\n            // }\n          })\n        }else{\n          return Promise.resolve(responseJson);\n        }\n      })\n      .then(responseJson => {\n        if (responseJson.length > 0) {\n          if (JSON.stringify(posts) !== JSON.stringify(responseJson)){\n            setPosts(responseJson);\n          }\n        }\n      })\n      .catch(e => console.error(\"error\", e));\n  }\n  \n  fetchPageContent();\n  return (\n    <main>\n      <div>\n        <Header collapse={false} />\n          {posts.map((item : any, key) => {\n            return (\n              <PageSection key={key} theme={key % 2 === 0 ? 'light' : 'dark'} classes=\"padding-top-three padding-bottom-three\">\n                <h1 className=\"cormorant big\"> {item.title.rendered} </h1>\n                <div dangerouslySetInnerHTML={{ __html: item.content.rendered }} />\n              </PageSection>\n            )\n          })}\n        <Footer theme=\"dark\" classes=\"padding-top-three\" />\n      </div>\n    </main>\n  )\n  // }\n}\n\nexport default HomePage;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  BrowserRouter,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport { HomePage} from './components';\nexport default function MainRouter() {\n  return (\n    <React.StrictMode>\n    <BrowserRouter>\n    <Switch>\n        <Route path=\"**\"\n        render={() => <HomePage />}\n        />\n      </Switch>\n    </BrowserRouter>\n    </React.StrictMode>\n  );\n}\n\nReactDOM.render(\n  <MainRouter />,\n  document.getElementById('main')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}